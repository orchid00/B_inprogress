---
title: What is Bioconductor?
description: >-
  In this chapter you will get hands-on with Bioconductor. Bioconductor is the specialized  repository for bioinformatics software, developed and maintained by the R community. You will learn how to install and use packages, for various kinds of analyses. You will be  introduced to S4 objects and functions, as most packages within Bioconductor inherit from S4. Lastly, we are going to use a real genomic dataset to explore biological data using Bioconductor packages. 


---
## Introduction to the Bioconductor Project

```yaml
type: VideoExercise
lang: r
xp: 50
skills: 1
key: bebaf2d02f
```

`@projector_key`
819c82e82d856db4e334ce5d9ffd69c9

---
## BiocInstaller

```yaml
type: NormalExercise
lang: r
xp: 100
skills: 1
key: def4276bb4
```

If you check any Bioconductor package page, you will find out that every installation 
requires the script biocLite.R. If you don't have the BiocInstaller package installed,
you can install and load it at the same time using this call:

    source("https://bioconductor.org/biocLite.R") 
    
We had already installed an loaded the ‘BiocInstaller’ package for you. Notice that you 
don't need to call `library()` to load it. To check which are the loaded packages use:

    search()


Because Bioconductor is in constant development we are better off documenting the version 
that we are currently using. You can check the version of Bioconductor using the explicit
syntax `package::function()`, like this:          

    BiocInstaller::biocVersion()
         
or type directly:
 
    `biocVersion()`

`@instructions`
Your task is to check the version the biocInstaller version installed
- first check the version using the syntax package::function()
- then check the version using only the name of the function()

`@hint`
Test each line of code from the text to check the biocInstaller version, one at the time.

`@pre_exercise_code`
```{r}
source("https://bioconductor.org/biocLite.R")
```
`@sample_code`
```{r}
# Explicit syntax to check the version of BiocInstaller

# The sort version to check the version of BiocInstaller
```
`@solution`
```{r}
# Explicit syntax to check the version of BiocInstaller
BiocInstaller::biocVersion()
# The sort version to check the version of BiocInstaller
biocVersion()
```
`@sct`
```{r}
success_msg("Good job!")
```



---
## BiocLite to load packages

```yaml
type: NormalExercise
lang: r
xp: 100
skills: 1
key: 056c840c9f
```

If you would like to research full genomes, or part of a genome and its characteristics,
The package BSgenome comes in handy.

We have installed it for you, using: 

    source("https://bioconductor.org/biocLite.R")
    biocLite("BSgenome")


Any bioconductor package can be installed this way, and then it needs to be loaded using library().
To check the package's version you will use the generic function `packageVersion`

`@instructions`
- Now it is your turn to load the package BSgenome
- Read the message to see which packages are loaded together (required packages), no need to add code.
- Check the version of BSgenome

`@hint`
check out 

?library # to load

?packageVersion # to check the version

`@pre_exercise_code`
```{r}
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome")
```
`@sample_code`
```{r}
# We have installed the package BSgenome for you
# First, load the package

# Read the lines that start with Loading required package: 
# Are there many packages?
# no code needed here, only take your time to see which packages are
# required for BSgenome to work
# Finally, check the version of the BSgenome package
```
`@solution`
```{r}
# We have installed the package BSgenome for you
# First, load the package
library(BSgenome)
# Read the lines that start with Loading required package: 
# Are there many packages?
# no code needed here, only take your time to see which packages are
# required for BSgenome to work
# Finally, check the version of the BSgenome package
packageVersion("BSgenome")
```
`@sct`
```{r}
success_msg("Excellent!")
```



---
## The role of S4 in Bioconductor

```yaml
type: VideoExercise
lang: r
xp: 50
skills: 1
key: 454596463f
```

`@projector_key`
214f687a3a3ce5f6e01ab65b27e4c626

---
## Interaction with clasess

```yaml
type: NormalExercise
lang: r
xp: 100
skills: 1
key: 050febf3ce
```

Let's say we have an object called `genome1`, this is an object of class `BSgenome`. You can check this with 

    class(genome1)
      
To investigate the possibilities of S4 objects, we can ask if this object is S4

    isS4(genome1)

The answer is `TRUE`

S4 formally defines the representation and inheritance for each class, so we can check that too

    isClass(genome1)
       
The answer is again `TRUE`
          
To learn a bit more about this object we can use `getClass`

    getClass(genome1)

`@instructions`
let's find out the difference between getClass and showClass, notice the different input as well
- Use the function `getClass()` to find out more information about the `genome1` object that we have loaded for you.
- Now, investigate about the `BSgenome` class using `showClass()`

`@hint`
check out 

?getClass

?showClass

`@pre_exercise_code`
```{r}
# load the package first
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Scerevisiae.UCSC.sacCer3")
# load genome 1
library(BSgenome.Scerevisiae.UCSC.sacCer3)
genome1 <- BSgenome.Scerevisiae.UCSC.sacCer3
```
`@sample_code`
```{r}
#  Investigate class definition of genome1

# Let's see what are the functions from the class definition of BSgenome
```
`@solution`
```{r}
#  Investigate class definition of genome1
getClass(genome1)
# Let's see what are the functions from the class definition of BSgenome
showClass("BSgenome")
```
`@sct`
```{r}
success_msg("Keep up the good work")
```



---
## Introducing biology of genomic datasets

```yaml
type: VideoExercise
lang: r
xp: 50
skills: 1
key: ad48090635
```

`@projector_key`
be55dda28c78f0a9339cb65915b89a90

---
## Accessors - accessing functionality of an object

```yaml
type: NormalExercise
lang: r
xp: 100
skills: 1
key: edeb30fb45
```

The object `genome1` is a BSgenome object, which is linked to `GenomeDescription`, to find more information   
[https://www.rdocumentation.org/packages/GenomeInfoDb/versions/1.8.3/topics/GenomeDescription-class]

To find out the organism name use the
accessor function `organism()`.

or you could use `commonName()`

To see the names of the sequences of `genome1` use `getnames()`

    getSeq(genome1, names = "chrI", start = 100, end = 150)

`@instructions`
Using the object `genome1` 
- Let's now check the scientific name of the `organism`
- Using the function `getSeq` 
- Get the first 30 bases of each chromosome

`@hint`
Look at the help of getSeq from the BSgenome package for more information
?getSeq

`@pre_exercise_code`
```{r}
# load genome 1
source("https://bioconductor.org/biocLite.R")
biocLite("BSgenome.Scerevisiae.UCSC.sacCer3")
# load genome 1
library(BSgenome.Scerevisiae.UCSC.sacCer3)
genome1 <- BSgenome.Scerevisiae.UCSC.sacCer3
```
`@sample_code`
```{r}
# scientific name of the organism
# the first 30 bases of each chromosome
```
`@solution`
```{r}
# scientific name of the organism
organism(genome1)

# the first 30 bases of each chromosome
getSeq(genome1, end = 30)
```
`@sct`
```{r}
success_msg("Congratulations, this might have been your first sequence analysis!")
```



---
## Discovering the yeast genome

```yaml
type: NormalExercise
lang: r
xp: 100
skills: 1
key: ff8659b293
```

Let's explore the yeast genome (this has been already installed andloaded for you)
          
    `yeastGenome <- BSgenome.Scerevisiae.UCSC.sacCer3`
    
As other data in R we can use `head()` and `tail()` to explore the `yeastGenome `
    
We can also look at each chromosome by using the `$` selection in this way
    `object_name$variable_name`

A last bonus is to use nchar to count the number of characters in a sequence

`@instructions`
Using the new `yeastGenome`
- let's `head()` the sequence names `seqnames()`
- let's `head()` the sequence lengths `seqlengths()`
- let's select `$` chromosome M `chrM`
- let's count `nchar()` the sequence from `chrM`


`@pre_exercise_code`
```{r}
yeastGenome <- BSgenome.Scerevisiae.UCSC.sacCer3
```

`@solution`
```{r}
head(seqnames(yeastGenome))
head(seqlengths(yeastGenome))
yeastGenome$chrM
nchar(yeastGenome$chrI)
```
`@sct`
```{r}
success_msg("Keep working hard!")
```



---
## Available Genomes

```yaml
type: MultipleChoiceExercise
lang: r
xp: 50
skills: 1
key: b9b6304252
```

As a recap, the `BSgenome` package makes available various public genomes.

If you are curious to explore the available genomes from this package, you can use

    `available.genomes()`
    
After running this function, can you tell which is the major provider of the available genomes?

`@instructions`
- 1000genomes
- JGI
- NCBI
- UCSC

`@hint`
The name will be in the following format: BSgenome.speciesName.provider.version

`@pre_exercise_code`
```{r}
library(BSgenome)
```


`@sct`
```{r}
msg1 <- "Incorrect. The 1000 Genome Project has made available only the Homo sapiens genome BSgenome.Hsapiens.1000genomes.hs37d5"
msg2 <- "Incorrect. The Joint Genome Institute or JGI, has made available only the plant genome of Arabidopsis lyrata BSgenome.Alyrata.JGI.v1"
msg3 <- "Incorrect. The National Center for Biotechnology Information NCBI has made available three genomes, but there is another provider of more genomes. Keep trying."
msg4 <- "Correct! The University of California Santa Cruz (UCSC) Genome Browser has made available the most genomes for BSgenome, totaling 74 of various species"
test_mc(4, feedback_msgs = c(msg1, msg2, msg3, msg4))
```


