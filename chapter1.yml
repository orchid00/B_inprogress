---
title: What is Bioconductor?
description: >-
  In this chapter you will get hands-on with Bioconductor. Bioconductor is the specialized 
  repository for bioinformatics software, developed and manintained by the R community. You
  will learn how to install and use packages, for various kinds of analyses. You will be 
  introduced to S4 objects and functions, as most packages within Bioconductor inherit from S4.
  Lastly, we are going to use a real genomic dataset to explore biological data using Bioconductor packages. 
---

## Introduction to the Bioconductor Project

```yaml
type: VideoExercise
lang: r
xp: 50
skills: 1
key: 8445cb19c9
```

In this video a short intro of Bioconductor project will be given. You
will learn about the basic analyses that you are able to perform using
the Bioconductor project. Also, a short intro on how to install and
use packages for various kinds of analyses. As example, we will use the
BSgenome package to start the exploring genomic dataset bit by bit.

`@video_link`

//player.vimeo.com/video/154783078

`@video_hls`

//videos.datacamp.com/transcoded/000_placeholders/v1/hls-temp.master.m3u8
---

## BiocInstaller

```yaml
type:  NormalExercise
lang: r
xp: 50
skills: 1
key: 8a75737abd
```

If you check any Bioconductor package page, you will find out that every installation 
requires the script biocLite.R. If you don't have the BiocInstaller package installed,
you can install and load it at the same time using this call:

    source("https://bioconductor.org/biocLite.R") 
    
We had already installed an loaded the ‘BiocInstaller’ package for you. Notice that you 
don't need to call `library()` to load it. To check which are the loaded packages use:

    search()

Because Bioconductor is in constant development we are better off documenting the version 
that we are currently using. You can check the version of Bioconductor using:          

    BiocInstaller::biocVersion()
         
 or, if BioCInstaller is already loaded (like on this exercise) you can type directly 
 
    biocVersion()
    
`@instructions`

Your task is to check both options in the console, and find out the version of biocInstaller.

`@hint`

Test each line of code from the text, one at the time.

`@pre_exercise_code`

```{r}

```

`@sct`

```{r}

# the long version to check the version of BiocInstaller



# The sort version to check the version of BiocInstaller


```
---

## BiocLite to load packages

```yaml
type: NormalExercise
lang: r
xp: 100
skills: 1
key: 58d4130bd8
```

If you would like to research full genomes, or part of a genome and its characteristics,
The package BSgenome comes in handy.

We have installed it for you, using 

          source("https://bioconductor.org/biocLite.R")
          biocLite("BSgenome")

Any bioconductor package can be installed this way, and then it needs to be loaded using library().
like packages from CRAN.

`@instructions`

          Now it is your turn to load the package see required packages and check the version of BSgenome
          
`@hint`

check out 
?library - to load
?packageVersion to check the version

`@pre_exercise_code`

```{r}
# we have installed the package BSgenome for you
```

`@sample_code`

```{r}
# First, load the package

# Read the lines that start with Loading required package: 
# Are there many packages?
# no code needed here

# Finally, check the version of the package

```

`@solution`

```{r}

# First, load the package
library(BSgenome)

# Read the lines that start wit Loading required package: 
# Are there many packages?
# no code neded here

# Finally, check the version of the package
packageVersion("BSgenome")

```

`@sct`

```{r}

```
---

## The role of S4 in Bioconductor

```yaml
type: VideoExercise
lang: r
xp: 50
skills: 1
key: 
```

S4 is a formal object-oriented programming (OOP) system. You will be
introduced to the benefits of using S4 and inheritance. A short
description about the framwork of S4 components (class, function and
methods). Later, you will be shown how to initialize and set arguments.

`@video_link`

//player.vimeo.com/video/154783078

`@video_hls`

//videos.datacamp.com/transcoded/000_placeholders/v1/hls-temp.master.m3u8
---

## Interaction with clasess

```yaml
type: NormalExercise
lang: r
xp: 100
skills: 1
key: 
```
Let's say we have an object called genome1, this is an object of class BSgenome. You can check with 

          class(genome1)
      
To investigate the possibilities of S4 objects, we can ask if this object is S4

          isS4(genome1)

The answer is TRUE

S4 formally defines the representation and inheritance for each class, so we can check that too

          isClass(genome1)
       
The answer is TRUE
          
          getClass(genome1)
                    
@instructions`

  Use the function getClass to find out more information about the BSgenome that we have loaded for you.
  
 
          
`@hint`

check out 
?getClass

`@pre_exercise_code`

```{r}
# we have installed the package BSgenome for you
# and saved an R object called genome1
```

`@sample_code`

```{r}
# Find out more about genome1

```

`@solution`

```{r}
# Find out more about genome1
getClass(genome1)

```

`@sct`

```{r}

```
---
## Introduction to biology of genomic datasets

      - type: VideoExercise
        title: 'Introduction to biology of genomic datasets '
        content: >-
          What is a genome? https://ghr.nlm.nih.gov/primer/hgp/genome

          How is this genome information stored?

          For the next exercise we are going to explore a public genome
          repository, using the BSgenome package.

          Exploring the yeast genome, also called S. cerevisiae
      - type: NormalExercise
        title: Calling methods and other attributes
        content: >-
          An accessor is a method for accessing data in an object usually an
          attribute of that object.

          Accessor are usually functions that start with get

          For example,

          How to retrieve sequence information from one section of a chromosome


          getSeq(genome1, "chrI", 100, 150)

          ?getSeq (from BSgenome package) for more info..


          ## Get the first 20 bases of each chromosome:

          getSeq(genome1, end = 20)


          ## Get the last 20 bases of each chromosome:

          getSeq(genome1, start = -20)


          organism(genome1)


          methods
      - type: NormalExercise
        title: BSgenome.Scerevisiae.UCSC.sacCer3
        content: >-
          The BSgenome package provides support for various genomes. In
          Bioconductor, we have special classes for each genome, because some
          chromosomes can be big. Genomics and big data are two related topics.
          For example, most genomes can take up several GBs of memory. 


          If you wanted to explore the available genomes from this package:

          available.genomes()


          Let's explore the yeast genome (this has been already installed and
          loaded for you)

          yeastGenome <- BSgenome.Scerevisiae.UCSC.sacCer3

          head(seqnames(yeastGenome))

          head(seqlengths(yeastGenome))


          We can also look at each chromosome

          yeastGenome$chr1

          nchar(yeastGenome$chr1)
      - type: NormalExercise
        title: Letter frequency
        content: >-
          There is a useful function called letterFrequency which we can use in
          a sequence, how would you check the frequency of CG in chromosome I?

          letterFrequency(yeastGenome$chrI, "CG") 

          That will give you the counts. If you wanted to see the percentage
          instead, you need to use the attribute  as.prob = TRUE.

          To check if you are correct before submitting the answer should be
          about %


          Note fill in the blanks

          Answer:

          letterFrequency(yeastGenome$chrI, "CG", as.prob = TRUE)
      - type: MultipleChoiceExercise
        title: bsapply from BSgenome
        content: >
          Let's now investigate the function bsapply from the BSgenome package.
          This is a function similar to apply which helps you iterate to each
          chromosome in a genome.


          In the following example, we are iterating through each chromosome of
          the yeastGenome to count the frequency of CG


          param <- new("BSParams", X = yeastGenome, FUN = letterFrequency,
          simplify = TRUE)

          bsapply(param, letters = "GC")


          Note how the mitochondria chromosome is very different. 


          Q:  is this showing you the counts or percentages of letterFrequency
          for each chromosome?

          @solution

          Answer:

          counts
